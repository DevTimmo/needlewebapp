{"version":3,"sources":["Form.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Form","handleSubmit","event","preventDefault","fetch","state","value","then","res","json","data","props","saveData","catch","console","log","handleChange","setState","target","onSubmit","this","type","onChange","Component","Table","map","syringe","index","referenceID","gauge","length","volume","key","header","Object","keys","push","className","renderTableHeader","renderTableData","React","App","syringes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sPAIqBA,G,6DACjB,aAAc,IAAD,8BACT,gBAMJC,aAAe,SAACC,GACZA,EAAMC,iBACNC,MAAM,+CAAD,OAAgD,EAAKC,MAAMC,QAC/DC,MAAK,SAAAC,GAEJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJ,EAAKC,MAAMC,SAASF,MAErBG,MAAMC,QAAQC,MAjBN,EAoBbC,aAAe,SAACd,GACZ,EAAKe,SAAS,CAACX,MAAOJ,EAAMgB,OAAOZ,SAnBnC,EAAKD,MAAQ,CACTC,MAAO,IAHF,E,qDAyBT,OACI,0BAAMa,SAAUC,KAAKnB,cACrB,kDACA,wCACE,2BACCoB,KAAK,SACLf,MAAOc,KAAKf,MAAMC,MAClBgB,SAAUF,KAAKJ,gBAGnB,qD,GApCuBO,cCAbC,E,gLAGb,OAAOJ,KAAKT,MAAMD,KAAKe,KAAI,SAACC,EAASC,GAAW,IACvCC,EAAsCF,EAAtCE,YAAaC,EAAyBH,EAAzBG,MAAOC,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,OACnC,OACI,wBAAIC,IAAKJ,GACP,qCAAWA,GACX,4BAAKC,EAAL,KACA,4BAAKC,EAAL,SACA,4BAAKC,EAAL,sB,0CAMQ,IAAD,OACTE,EAAS,GAKf,OAJAC,OAAOC,KAAKf,KAAKT,MAAMD,KAAK,IAAIe,KAAI,SAACO,GACjCC,EAAOG,KAAK,wBAAIJ,IAAK,EAAKrB,MAAMD,KAAKkB,aAAcI,OAGhDC,I,+BAIP,OACI,2BAAOI,UAAU,YACb,+BACI,4BAAKjB,KAAKT,MAAMD,MAAQU,KAAKT,MAAMD,KAAK,IAAMU,KAAKkB,qBAClDlB,KAAKmB,wB,GA9BSC,IAAMjB,WCGpBkB,E,kDAEnB,aAAc,IAAD,8BACX,gBAOF7B,SAAW,SAACF,GACV,EAAKO,SAAS,CAACyB,SAAUhC,KAPzB,EAAKL,MAAQ,CACXqC,SAAU,GACVpC,MAAO,IAJE,E,qDAaX,OACA,yBAAK+B,UAAU,OACb,kBAAC,EAAD,CAAMzB,SAAUQ,KAAKR,WACrB,kBAAC,EAAD,CAAOF,KAAMU,KAAKf,MAAMqC,gB,GAlBGnB,aCKboB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.62ec2121.chunk.js","sourcesContent":["//https://vegibit.com/a-simple-react-js-form-example/\nimport React, { Component } from 'react';\nimport {GET} from './Fetch.js'\n\nexport default class Form extends Component{\n    constructor(){\n        super();\n        this.state = {\n            value: ''\n        };\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(`http://51.81.32.218:4000/databaseTest?gauge=${this.state.value}`)\n        .then(res => {\n          //console.log(res);\n          return res.json();\n        })\n        .then(data => {\n          this.props.saveData(data);\n        })\n        .catch(console.log);\n      }\n\n    handleChange = (event) => {\n        this.setState({value: event.target.value})\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n            <h1>Needle Search Tool</h1>\n            <label>Gauge:\n              <input\n               type=\"number\"\n               value={this.state.value}\n               onChange={this.handleChange}\n               />\n           </label>\n           <button>Find product</button>\n         </form>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\n\n\nexport default class Table extends React.Component {\n\n    renderTableData(){\n        return this.props.data.map((syringe, index) => {\n          const {referenceID, gauge, length, volume} = syringe;\n          return (\n              <tr key={referenceID}>\n                <td>08290-{referenceID}</td>\n                <td>{gauge}G</td>\n                <td>{length} inch</td>\n                <td>{volume} milliliters</td>\n              </tr>\n          )\n        })\n      }\n    \n    renderTableHeader(){\n        const header = [];\n        Object.keys(this.props.data[0]).map((key) => {\n            header.push(<th key={this.props.data.referenceID}>{key}</th>)\n        })\n        //console.log(header);\n        return header;\n    }\n\n    render(){\n        return(\n            <table className='syringes'>\n                <tbody>\n                    <tr>{this.props.data && this.props.data[0] && this.renderTableHeader()}</tr>\n                    {this.renderTableData()}\n                </tbody>\n            </table>\n        )\n    }\n\n}","//https://www.telerik.com/blogs/how-to-build-forms-with-react-the-easy-way\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form.js'\nimport Table from './Table.js'\n\nexport default class App extends Component{\n  \n  constructor(){\n    super();\n    this.state = {\n      syringes: [],\n      value: ''\n    };\n  }\n\n  saveData = (data) => {\n    this.setState({syringes: data});\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <Form saveData={this.saveData}/>\n      <Table data={this.state.syringes}/>\n    </div>\n    );\n};\n}\n//https://medium.com/the-andela-way/handling-user-input-in-react-crud-1396e51a70bf\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Table from './Table'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}